import { setNewValue, setSnackbar, updateTreeWithNewData } from "../../../store/segmentTreeSlice";
import { AppDispatch } from "../../../store/store";

export const handleAddElement = async (
  newValue: number, // üîπ newValue —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —á–∏—Å–ª–æ
  MAX_LEAVES: number,
  dispatch: AppDispatch, // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dispatch –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  data: number[]
) => {
  if (isNaN(newValue)) {
    console.error("–û—à–∏–±–∫–∞: newValue –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º:", newValue);
    return;
  }

  if (data.length >= MAX_LEAVES) {
    dispatch(setSnackbar({ message: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç—å–µ–≤ (${MAX_LEAVES}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ.`, open: true }));
    return;
  }

  const updatedData = [...data, newValue];

  try {
    const resultAction = await dispatch(updateTreeWithNewData(updatedData));
    if (updateTreeWithNewData.rejected.match(resultAction)) {
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞");
    }

    dispatch(setNewValue(0)); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–µ
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:", error);
    dispatch(setSnackbar({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.", open: true }));
  }
};
